@import "../../styles/tokens.scss";

// the div that encapsulates the Grid
.gridContainer {
  width: 100%; // IMPORTANT - need parent div of Grid to full width in order to horizontally center the Grid
}

// base grid
.grid {
  box-sizing: border-box; // width and height includes: content, padding, and border thickness
  max-width: 1280px;
  display: grid;
  grid-template-columns: repeat(12, 1fr); // sets the grid as 12 columns
  gap: 1.5rem;
  grid-auto-flow: row; // GridItems are added row-wise
  // specify the widths of implicit (not explicitly defined but generated) cols and rows
  grid-auto-columns: 1fr;
  grid-auto-rows: minmax(min-content, auto);
  max-width: 1280px; // grid will not exceed 1280px unless it is fluid
  margin: 0 auto; // horizontally centers Grid
  overflow: hidden;
}

// fluid forces the Grid to be 100% or full width of the screen
.fluid {
  min-width: 100% !important;
  margin: 0 !important;
}
// GridItems are the direct children of the Grid component
.gridItem {
  // IMPORTANT - resetting the min-width and min-height prevents the columns (GridItems) of the grid from overflowing
  min-width: 0;
  min-height: 0;
  // flexbox helps control the content within the item e.g. centering
  display: flex;
}

// gridItem utility classes - helps rearrange content within a GridItem
.gridItemCenterX {
  justify-content: center;
}
.gridItemCenterY {
  align-items: center;
}
.gridItemCenterText {
  text-align: center;
}

// the col and row classes - creates classes based on col and row variables
@for $i from 1 through 13 {
  @for $j from 1 through 13 {
    .cols-#{$i}-#{$j} {
      grid-column-start: $i;
      grid-column-end: $j;
    }
    .rows-#{$i}-#{$j} {
      grid-row-start: $i;
      grid-row-end: $j;
    }
  }
}

/************************************** 
        MEDIA QUERIES
**************************************/
// lg-breakpoint - ensures that grid maintains lg-breakpoint horizontal margin spacing
@media screen and (max-width: $lg-breakpoint-end) {
  .grid {
    max-width: 100%;
    margin: 0 1.5rem;
  }
}
// md-breakpoint - Grid switches to 8 col system, smaller gutter spaces, smaller horizontal margin spacing
@media screen and (max-width: $md-breakpoint-end) {
  .grid {
    grid-template-columns: repeat(8, 1fr); // sets the grid as 8 columns
    max-width: 100%;
    // change gutter and horizontal margin spacing
    gap: 1rem;
    margin: 0 1rem;
  }
  // the col and row classes - creates classes based on col and row variables
  @for $i from 1 through 9 {
    @for $j from 1 through 9 {
      .cols-md-#{$i}-#{$j} {
        grid-column-start: $i;
        grid-column-end: $j;
      }
      .rows-md-#{$i}-#{$j} {
        grid-row-start: $i;
        grid-row-end: $j;
      }
    }
  }
}
// sm-breakpoint - Grid switches to 8 col system, smaller gutter spaces, smaller horizontal margin spacing
@media screen and (max-width: $sm-breakpoint-end) {
  .grid {
    grid-template-columns: repeat(4, 1fr); // sets the grid as 4 columns
    max-width: 100%;
    // change gutter and horizontal margin spacing
    gap: 1rem;
    margin: 0 1rem;
  }
  // the col and row classes - creates classes based on col and row variables
  @for $i from 1 through 5 {
    @for $j from 1 through 5 {
      .cols-sm-#{$i}-#{$j} {
        grid-column-start: $i;
        grid-column-end: $j;
      }
      .rows-sm-#{$i}-#{$j} {
        grid-row-start: $i;
        grid-row-end: $j;
      }
    }
  }
}
